Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> calc
Rule 1     calc -> expression
Rule 2     calc -> empty
Rule 3     empty -> <empty>
Rule 4     expression -> expression OPERATOR expression
Rule 5     expression -> expression OPERATOR PROPOSITIONAL_VAR
Rule 6     expression -> expression OPERATOR TRUE
Rule 7     expression -> expression OPERATOR FALSE
Rule 8     expression_negated -> NOT expression
Rule 9     expression_negated -> NOT expression_negated
Rule 10    expression_negated -> NOT TRUE
Rule 11    expression_negated -> NOT FALSE
Rule 12    expression_negated -> NOT PROPOSITIONAL_VAR
Rule 13    expression -> PROPOSITIONAL_VAR
Rule 14    expression -> TRUE
Rule 15    expression -> FALSE
Rule 16    expression -> expression
Rule 17    expression -> expression_negated
Rule 18    expression -> LPAREN expression RPAREN

Terminals, with rules where they appear

FALSE                : 7 11 15
LPAREN               : 18
NOT                  : 8 9 10 11 12
OPERATOR             : 4 5 6 7
PROPOSITIONAL_VAR    : 5 12 13
RPAREN               : 18
TRUE                 : 6 10 14
error                : 

Nonterminals, with rules where they appear

calc                 : 0
empty                : 2
expression           : 1 4 4 5 6 7 8 16 18
expression_negated   : 9 17

Parsing method: LALR

state 0

    (0) S' -> . calc
    (1) calc -> . expression
    (2) calc -> . empty
    (4) expression -> . expression OPERATOR expression
    (5) expression -> . expression OPERATOR PROPOSITIONAL_VAR
    (6) expression -> . expression OPERATOR TRUE
    (7) expression -> . expression OPERATOR FALSE
    (13) expression -> . PROPOSITIONAL_VAR
    (14) expression -> . TRUE
    (15) expression -> . FALSE
    (16) expression -> . expression
    (17) expression -> . expression_negated
    (18) expression -> . LPAREN expression RPAREN
    (3) empty -> .
    (8) expression_negated -> . NOT expression
    (9) expression_negated -> . NOT expression_negated
    (10) expression_negated -> . NOT TRUE
    (11) expression_negated -> . NOT FALSE
    (12) expression_negated -> . NOT PROPOSITIONAL_VAR

    PROPOSITIONAL_VAR shift and go to state 4
    TRUE            shift and go to state 5
    FALSE           shift and go to state 6
    LPAREN          shift and go to state 8
    $end            reduce using rule 3 (empty -> .)
    NOT             shift and go to state 9

    calc                           shift and go to state 1
    expression                     shift and go to state 2
    empty                          shift and go to state 3
    expression_negated             shift and go to state 7

state 1

    (0) S' -> calc .



state 2

    (1) calc -> expression .
    (4) expression -> expression . OPERATOR expression
    (5) expression -> expression . OPERATOR PROPOSITIONAL_VAR
    (6) expression -> expression . OPERATOR TRUE
    (7) expression -> expression . OPERATOR FALSE
    (16) expression -> expression .

  ! shift/reduce conflict for OPERATOR resolved as shift
  ! reduce/reduce conflict for $end resolved using rule 1 (calc -> expression .)
    $end            reduce using rule 1 (calc -> expression .)
    OPERATOR        shift and go to state 10

  ! OPERATOR        [ reduce using rule 16 (expression -> expression .) ]
  ! $end            [ reduce using rule 16 (expression -> expression .) ]


state 3

    (2) calc -> empty .

    $end            reduce using rule 2 (calc -> empty .)


state 4

    (13) expression -> PROPOSITIONAL_VAR .

    OPERATOR        reduce using rule 13 (expression -> PROPOSITIONAL_VAR .)
    $end            reduce using rule 13 (expression -> PROPOSITIONAL_VAR .)
    RPAREN          reduce using rule 13 (expression -> PROPOSITIONAL_VAR .)


state 5

    (14) expression -> TRUE .

    OPERATOR        reduce using rule 14 (expression -> TRUE .)
    $end            reduce using rule 14 (expression -> TRUE .)
    RPAREN          reduce using rule 14 (expression -> TRUE .)


state 6

    (15) expression -> FALSE .

    OPERATOR        reduce using rule 15 (expression -> FALSE .)
    $end            reduce using rule 15 (expression -> FALSE .)
    RPAREN          reduce using rule 15 (expression -> FALSE .)


state 7

    (17) expression -> expression_negated .

    OPERATOR        reduce using rule 17 (expression -> expression_negated .)
    $end            reduce using rule 17 (expression -> expression_negated .)
    RPAREN          reduce using rule 17 (expression -> expression_negated .)


state 8

    (18) expression -> LPAREN . expression RPAREN
    (4) expression -> . expression OPERATOR expression
    (5) expression -> . expression OPERATOR PROPOSITIONAL_VAR
    (6) expression -> . expression OPERATOR TRUE
    (7) expression -> . expression OPERATOR FALSE
    (13) expression -> . PROPOSITIONAL_VAR
    (14) expression -> . TRUE
    (15) expression -> . FALSE
    (16) expression -> . expression
    (17) expression -> . expression_negated
    (18) expression -> . LPAREN expression RPAREN
    (8) expression_negated -> . NOT expression
    (9) expression_negated -> . NOT expression_negated
    (10) expression_negated -> . NOT TRUE
    (11) expression_negated -> . NOT FALSE
    (12) expression_negated -> . NOT PROPOSITIONAL_VAR

    PROPOSITIONAL_VAR shift and go to state 4
    TRUE            shift and go to state 5
    FALSE           shift and go to state 6
    LPAREN          shift and go to state 8
    NOT             shift and go to state 9

    expression                     shift and go to state 11
    expression_negated             shift and go to state 7

state 9

    (8) expression_negated -> NOT . expression
    (9) expression_negated -> NOT . expression_negated
    (10) expression_negated -> NOT . TRUE
    (11) expression_negated -> NOT . FALSE
    (12) expression_negated -> NOT . PROPOSITIONAL_VAR
    (4) expression -> . expression OPERATOR expression
    (5) expression -> . expression OPERATOR PROPOSITIONAL_VAR
    (6) expression -> . expression OPERATOR TRUE
    (7) expression -> . expression OPERATOR FALSE
    (13) expression -> . PROPOSITIONAL_VAR
    (14) expression -> . TRUE
    (15) expression -> . FALSE
    (16) expression -> . expression
    (17) expression -> . expression_negated
    (18) expression -> . LPAREN expression RPAREN
    (8) expression_negated -> . NOT expression
    (9) expression_negated -> . NOT expression_negated
    (10) expression_negated -> . NOT TRUE
    (11) expression_negated -> . NOT FALSE
    (12) expression_negated -> . NOT PROPOSITIONAL_VAR

    TRUE            shift and go to state 14
    FALSE           shift and go to state 15
    PROPOSITIONAL_VAR shift and go to state 16
    LPAREN          shift and go to state 8
    NOT             shift and go to state 9

    expression                     shift and go to state 12
    expression_negated             shift and go to state 13

state 10

    (4) expression -> expression OPERATOR . expression
    (5) expression -> expression OPERATOR . PROPOSITIONAL_VAR
    (6) expression -> expression OPERATOR . TRUE
    (7) expression -> expression OPERATOR . FALSE
    (4) expression -> . expression OPERATOR expression
    (5) expression -> . expression OPERATOR PROPOSITIONAL_VAR
    (6) expression -> . expression OPERATOR TRUE
    (7) expression -> . expression OPERATOR FALSE
    (13) expression -> . PROPOSITIONAL_VAR
    (14) expression -> . TRUE
    (15) expression -> . FALSE
    (16) expression -> . expression
    (17) expression -> . expression_negated
    (18) expression -> . LPAREN expression RPAREN
    (8) expression_negated -> . NOT expression
    (9) expression_negated -> . NOT expression_negated
    (10) expression_negated -> . NOT TRUE
    (11) expression_negated -> . NOT FALSE
    (12) expression_negated -> . NOT PROPOSITIONAL_VAR

    PROPOSITIONAL_VAR shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    LPAREN          shift and go to state 8
    NOT             shift and go to state 9

    expression                     shift and go to state 17
    expression_negated             shift and go to state 7

state 11

    (18) expression -> LPAREN expression . RPAREN
    (4) expression -> expression . OPERATOR expression
    (5) expression -> expression . OPERATOR PROPOSITIONAL_VAR
    (6) expression -> expression . OPERATOR TRUE
    (7) expression -> expression . OPERATOR FALSE
    (16) expression -> expression .

  ! shift/reduce conflict for RPAREN resolved as shift
  ! shift/reduce conflict for OPERATOR resolved as shift
    RPAREN          shift and go to state 21
    OPERATOR        shift and go to state 10

  ! RPAREN          [ reduce using rule 16 (expression -> expression .) ]
  ! OPERATOR        [ reduce using rule 16 (expression -> expression .) ]


state 12

    (8) expression_negated -> NOT expression .
    (4) expression -> expression . OPERATOR expression
    (5) expression -> expression . OPERATOR PROPOSITIONAL_VAR
    (6) expression -> expression . OPERATOR TRUE
    (7) expression -> expression . OPERATOR FALSE
    (16) expression -> expression .

  ! shift/reduce conflict for OPERATOR resolved as shift
  ! shift/reduce conflict for OPERATOR resolved as shift
  ! reduce/reduce conflict for $end resolved using rule 8 (expression_negated -> NOT expression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 8 (expression_negated -> NOT expression .)
    $end            reduce using rule 8 (expression_negated -> NOT expression .)
    RPAREN          reduce using rule 8 (expression_negated -> NOT expression .)
    OPERATOR        shift and go to state 10

  ! OPERATOR        [ reduce using rule 8 (expression_negated -> NOT expression .) ]
  ! OPERATOR        [ reduce using rule 16 (expression -> expression .) ]
  ! $end            [ reduce using rule 16 (expression -> expression .) ]
  ! RPAREN          [ reduce using rule 16 (expression -> expression .) ]


state 13

    (9) expression_negated -> NOT expression_negated .
    (17) expression -> expression_negated .

  ! reduce/reduce conflict for OPERATOR resolved using rule 9 (expression_negated -> NOT expression_negated .)
  ! reduce/reduce conflict for $end resolved using rule 9 (expression_negated -> NOT expression_negated .)
  ! reduce/reduce conflict for RPAREN resolved using rule 9 (expression_negated -> NOT expression_negated .)
    OPERATOR        reduce using rule 9 (expression_negated -> NOT expression_negated .)
    $end            reduce using rule 9 (expression_negated -> NOT expression_negated .)
    RPAREN          reduce using rule 9 (expression_negated -> NOT expression_negated .)

  ! OPERATOR        [ reduce using rule 17 (expression -> expression_negated .) ]
  ! $end            [ reduce using rule 17 (expression -> expression_negated .) ]
  ! RPAREN          [ reduce using rule 17 (expression -> expression_negated .) ]


state 14

    (10) expression_negated -> NOT TRUE .
    (14) expression -> TRUE .

  ! reduce/reduce conflict for OPERATOR resolved using rule 10 (expression_negated -> NOT TRUE .)
  ! reduce/reduce conflict for $end resolved using rule 10 (expression_negated -> NOT TRUE .)
  ! reduce/reduce conflict for RPAREN resolved using rule 10 (expression_negated -> NOT TRUE .)
    OPERATOR        reduce using rule 10 (expression_negated -> NOT TRUE .)
    $end            reduce using rule 10 (expression_negated -> NOT TRUE .)
    RPAREN          reduce using rule 10 (expression_negated -> NOT TRUE .)

  ! OPERATOR        [ reduce using rule 14 (expression -> TRUE .) ]
  ! $end            [ reduce using rule 14 (expression -> TRUE .) ]
  ! RPAREN          [ reduce using rule 14 (expression -> TRUE .) ]


state 15

    (11) expression_negated -> NOT FALSE .
    (15) expression -> FALSE .

  ! reduce/reduce conflict for OPERATOR resolved using rule 11 (expression_negated -> NOT FALSE .)
  ! reduce/reduce conflict for $end resolved using rule 11 (expression_negated -> NOT FALSE .)
  ! reduce/reduce conflict for RPAREN resolved using rule 11 (expression_negated -> NOT FALSE .)
    OPERATOR        reduce using rule 11 (expression_negated -> NOT FALSE .)
    $end            reduce using rule 11 (expression_negated -> NOT FALSE .)
    RPAREN          reduce using rule 11 (expression_negated -> NOT FALSE .)

  ! OPERATOR        [ reduce using rule 15 (expression -> FALSE .) ]
  ! $end            [ reduce using rule 15 (expression -> FALSE .) ]
  ! RPAREN          [ reduce using rule 15 (expression -> FALSE .) ]


state 16

    (12) expression_negated -> NOT PROPOSITIONAL_VAR .
    (13) expression -> PROPOSITIONAL_VAR .

  ! reduce/reduce conflict for OPERATOR resolved using rule 12 (expression_negated -> NOT PROPOSITIONAL_VAR .)
  ! reduce/reduce conflict for $end resolved using rule 12 (expression_negated -> NOT PROPOSITIONAL_VAR .)
  ! reduce/reduce conflict for RPAREN resolved using rule 12 (expression_negated -> NOT PROPOSITIONAL_VAR .)
    OPERATOR        reduce using rule 12 (expression_negated -> NOT PROPOSITIONAL_VAR .)
    $end            reduce using rule 12 (expression_negated -> NOT PROPOSITIONAL_VAR .)
    RPAREN          reduce using rule 12 (expression_negated -> NOT PROPOSITIONAL_VAR .)

  ! OPERATOR        [ reduce using rule 13 (expression -> PROPOSITIONAL_VAR .) ]
  ! $end            [ reduce using rule 13 (expression -> PROPOSITIONAL_VAR .) ]
  ! RPAREN          [ reduce using rule 13 (expression -> PROPOSITIONAL_VAR .) ]


state 17

    (4) expression -> expression OPERATOR expression .
    (4) expression -> expression . OPERATOR expression
    (5) expression -> expression . OPERATOR PROPOSITIONAL_VAR
    (6) expression -> expression . OPERATOR TRUE
    (7) expression -> expression . OPERATOR FALSE
    (16) expression -> expression .

  ! shift/reduce conflict for OPERATOR resolved as shift
  ! shift/reduce conflict for OPERATOR resolved as shift
  ! reduce/reduce conflict for $end resolved using rule 4 (expression -> expression OPERATOR expression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 4 (expression -> expression OPERATOR expression .)
    $end            reduce using rule 4 (expression -> expression OPERATOR expression .)
    RPAREN          reduce using rule 4 (expression -> expression OPERATOR expression .)
    OPERATOR        shift and go to state 10

  ! OPERATOR        [ reduce using rule 4 (expression -> expression OPERATOR expression .) ]
  ! OPERATOR        [ reduce using rule 16 (expression -> expression .) ]
  ! $end            [ reduce using rule 16 (expression -> expression .) ]
  ! RPAREN          [ reduce using rule 16 (expression -> expression .) ]


state 18

    (5) expression -> expression OPERATOR PROPOSITIONAL_VAR .
    (13) expression -> PROPOSITIONAL_VAR .

  ! reduce/reduce conflict for OPERATOR resolved using rule 5 (expression -> expression OPERATOR PROPOSITIONAL_VAR .)
  ! reduce/reduce conflict for $end resolved using rule 5 (expression -> expression OPERATOR PROPOSITIONAL_VAR .)
  ! reduce/reduce conflict for RPAREN resolved using rule 5 (expression -> expression OPERATOR PROPOSITIONAL_VAR .)
    OPERATOR        reduce using rule 5 (expression -> expression OPERATOR PROPOSITIONAL_VAR .)
    $end            reduce using rule 5 (expression -> expression OPERATOR PROPOSITIONAL_VAR .)
    RPAREN          reduce using rule 5 (expression -> expression OPERATOR PROPOSITIONAL_VAR .)

  ! OPERATOR        [ reduce using rule 13 (expression -> PROPOSITIONAL_VAR .) ]
  ! $end            [ reduce using rule 13 (expression -> PROPOSITIONAL_VAR .) ]
  ! RPAREN          [ reduce using rule 13 (expression -> PROPOSITIONAL_VAR .) ]


state 19

    (6) expression -> expression OPERATOR TRUE .
    (14) expression -> TRUE .

  ! reduce/reduce conflict for OPERATOR resolved using rule 6 (expression -> expression OPERATOR TRUE .)
  ! reduce/reduce conflict for $end resolved using rule 6 (expression -> expression OPERATOR TRUE .)
  ! reduce/reduce conflict for RPAREN resolved using rule 6 (expression -> expression OPERATOR TRUE .)
    OPERATOR        reduce using rule 6 (expression -> expression OPERATOR TRUE .)
    $end            reduce using rule 6 (expression -> expression OPERATOR TRUE .)
    RPAREN          reduce using rule 6 (expression -> expression OPERATOR TRUE .)

  ! OPERATOR        [ reduce using rule 14 (expression -> TRUE .) ]
  ! $end            [ reduce using rule 14 (expression -> TRUE .) ]
  ! RPAREN          [ reduce using rule 14 (expression -> TRUE .) ]


state 20

    (7) expression -> expression OPERATOR FALSE .
    (15) expression -> FALSE .

  ! reduce/reduce conflict for OPERATOR resolved using rule 7 (expression -> expression OPERATOR FALSE .)
  ! reduce/reduce conflict for $end resolved using rule 7 (expression -> expression OPERATOR FALSE .)
  ! reduce/reduce conflict for RPAREN resolved using rule 7 (expression -> expression OPERATOR FALSE .)
    OPERATOR        reduce using rule 7 (expression -> expression OPERATOR FALSE .)
    $end            reduce using rule 7 (expression -> expression OPERATOR FALSE .)
    RPAREN          reduce using rule 7 (expression -> expression OPERATOR FALSE .)

  ! OPERATOR        [ reduce using rule 15 (expression -> FALSE .) ]
  ! $end            [ reduce using rule 15 (expression -> FALSE .) ]
  ! RPAREN          [ reduce using rule 15 (expression -> FALSE .) ]


state 21

    (18) expression -> LPAREN expression RPAREN .

    OPERATOR        reduce using rule 18 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 18 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 18 (expression -> LPAREN expression RPAREN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for OPERATOR in state 2 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 11 resolved as shift
WARNING: shift/reduce conflict for OPERATOR in state 11 resolved as shift
WARNING: shift/reduce conflict for OPERATOR in state 12 resolved as shift
WARNING: shift/reduce conflict for OPERATOR in state 12 resolved as shift
WARNING: shift/reduce conflict for OPERATOR in state 17 resolved as shift
WARNING: shift/reduce conflict for OPERATOR in state 17 resolved as shift
WARNING: reduce/reduce conflict in state 2 resolved using rule (calc -> expression)
WARNING: rejected rule (expression -> expression) in state 2
WARNING: reduce/reduce conflict in state 12 resolved using rule (expression_negated -> NOT expression)
WARNING: rejected rule (expression -> expression) in state 12
WARNING: reduce/reduce conflict in state 13 resolved using rule (expression_negated -> NOT expression_negated)
WARNING: rejected rule (expression -> expression_negated) in state 13
WARNING: reduce/reduce conflict in state 14 resolved using rule (expression_negated -> NOT TRUE)
WARNING: rejected rule (expression -> TRUE) in state 14
WARNING: reduce/reduce conflict in state 15 resolved using rule (expression_negated -> NOT FALSE)
WARNING: rejected rule (expression -> FALSE) in state 15
WARNING: reduce/reduce conflict in state 16 resolved using rule (expression_negated -> NOT PROPOSITIONAL_VAR)
WARNING: rejected rule (expression -> PROPOSITIONAL_VAR) in state 16
WARNING: reduce/reduce conflict in state 17 resolved using rule (expression -> expression OPERATOR expression)
WARNING: rejected rule (expression -> expression) in state 17
WARNING: reduce/reduce conflict in state 18 resolved using rule (expression -> expression OPERATOR PROPOSITIONAL_VAR)
WARNING: rejected rule (expression -> PROPOSITIONAL_VAR) in state 18
WARNING: reduce/reduce conflict in state 19 resolved using rule (expression -> expression OPERATOR TRUE)
WARNING: rejected rule (expression -> TRUE) in state 19
WARNING: reduce/reduce conflict in state 20 resolved using rule (expression -> expression OPERATOR FALSE)
WARNING: rejected rule (expression -> FALSE) in state 20
WARNING: Rule (expression -> expression) is never reduced
